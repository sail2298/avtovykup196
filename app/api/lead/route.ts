export const dynamic = "force-dynamic";

import { NextResponse } from "next/server";

// üß† –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å (–∞–Ω—Ç–∏—Å–ø–∞–º) ‚Äî IP ‚Üí –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
const lastRequestMap = new Map<string, number>();

// üïí –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fetch —Å —Ç–∞–π–º–∞—É—Ç–æ–º
async function fetchWithTimeout(
  resource: string,
  options: RequestInit = {},
  timeout = 20000
): Promise<Response> {
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeout);

  try {
    const response = await fetch(resource, { ...options, signal: controller.signal });
    clearTimeout(id);
    return response;
  } catch (error) {
    clearTimeout(id);
    throw error;
  }
}

export async function POST(req: Request) {
  try {
    console.log("‚úÖ API –≤—ã–∑–≤–∞–Ω ‚Äî lead route –∑–∞–ø—É—â–µ–Ω");

    // üß± –ü–æ–ª—É—á–∞–µ–º IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const ip = req.headers.get("x-forwarded-for")?.split(",")[0]?.trim() || "unknown";
    const now = Date.now();
    const lastRequest = lastRequestMap.get(ip) || 0;
    const diff = now - lastRequest;

    // üö´ –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º
    if (diff < 10_000) {
      console.warn(`‚è≥ –ß–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å IP ${ip}`);
      return new NextResponse(
        JSON.stringify({
          ok: false,
          error: "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.",
        }),
        { status: 429, headers: { "Content-Type": "application/json" } }
      );
    }

    // ‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    lastRequestMap.set(ip, now);

    const body = await req.json();
    console.log("üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:", body);

    const { name, phone, brand, model, year, type } = body;

    // üß© –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!phone) {
      return new NextResponse(
        JSON.stringify({ ok: false, error: "Phone is required" }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }

    // üì± –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
    const cleanPhone = phone.replace(/[^\d+]/g, "");
    const isValid = /^(\+7|7|8)\d{10}$/.test(cleanPhone);
    if (!isValid) {
      console.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", phone);
      return new NextResponse(
        JSON.stringify({ ok: false, error: "Invalid phone number" }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }

    // ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram (–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–æ –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ)
    const token = "7997711297:AAG9F3WhCoNy0xw7czSFFrteOCFEwMhle0I";
    const chatIdsRaw = "1207718807,5352538337";

    const chatIds = chatIdsRaw.split(",").map((id) => id.trim());
    const url = `https://api.telegram.org/bot${token}/sendMessage`;

    // üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ
    const message =
      `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–∫—É–ø –∞–≤—Ç–æ\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
      `üë§ –ò–º—è: ${name || "-"}\n` +
      `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${cleanPhone}\n` +
      `üöó –ú–∞—Ä–∫–∞: ${brand || "-"}\n` +
      `üîß –ú–æ–¥–µ–ª—å: ${model || "-"}\n` +
      `üìÖ –ì–æ–¥: ${year || "-"}\n` +
      `‚öôÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${type || "-"}\n` +
      `üïí –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

    // üí¨ –ö–Ω–æ–ø–∫–∞ WhatsApp
    const waNumber = cleanPhone.replace(/^\+?8/, "7").replace(/^\+/, "");
    const keyboard = {
      inline_keyboard: [
        [
          { text: "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp", url: `https://wa.me/${waNumber}` },
        ],
      ],
    };

    // üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    for (const chatId of chatIds) {
      try {
        const response = await fetchWithTimeout(
          url,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              chat_id: chatId,
              text: message,
              reply_markup: keyboard,
            }),
          },
          20000
        );

        const data = await response.json().catch(() => null);
        if (!data?.ok) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ Telegram (${chatId}):`, data?.description || "Unknown error");
        } else {
          console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
        }
      } catch (err: any) {
        console.error(`‚ùå Telegram fetch error (${chatId}):`, err.message);
      }
    }

    return new NextResponse(
      JSON.stringify({ ok: true }),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  } catch (err: any) {
    console.error("‚ùå API error:", err);
    return new NextResponse(
      JSON.stringify({ ok: false, error: err.message || "Unknown error" }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}
